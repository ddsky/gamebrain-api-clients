/*
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package co.gamebrain.client.model;

import java.util.Objects;
import co.gamebrain.client.model.SearchResponseActiveFilterOptionsInner;
import co.gamebrain.client.model.SearchResponseFilterOptionsInner;
import co.gamebrain.client.model.SearchResponseResultsInner;
import co.gamebrain.client.model.SearchResponseSorting;
import co.gamebrain.client.model.SearchResponseSortingOptionsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import co.gamebrain.client.JSON;

/**
 * SearchResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0-SNAPSHOT")
public class SearchResponse {
  public static final String SERIALIZED_NAME_SORTING = "sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private SearchResponseSorting sorting;

  public static final String SERIALIZED_NAME_ACTIVE_FILTER_OPTIONS = "active_filter_options";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FILTER_OPTIONS)
  private List<SearchResponseActiveFilterOptionsInner> activeFilterOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "total_results";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private Integer totalResults;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<SearchResponseResultsInner> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_OPTIONS = "filter_options";
  @SerializedName(SERIALIZED_NAME_FILTER_OPTIONS)
  private List<SearchResponseFilterOptionsInner> filterOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORTING_OPTIONS = "sorting_options";
  @SerializedName(SERIALIZED_NAME_SORTING_OPTIONS)
  private List<SearchResponseSortingOptionsInner> sortingOptions = new ArrayList<>();

  public SearchResponse() {
  }

  public SearchResponse sorting(SearchResponseSorting sorting) {
    this.sorting = sorting;
    return this;
  }

  /**
   * Get sorting
   * @return sorting
   */
  @javax.annotation.Nullable
  public SearchResponseSorting getSorting() {
    return sorting;
  }

  public void setSorting(SearchResponseSorting sorting) {
    this.sorting = sorting;
  }


  public SearchResponse activeFilterOptions(List<SearchResponseActiveFilterOptionsInner> activeFilterOptions) {
    this.activeFilterOptions = activeFilterOptions;
    return this;
  }

  public SearchResponse addActiveFilterOptionsItem(SearchResponseActiveFilterOptionsInner activeFilterOptionsItem) {
    if (this.activeFilterOptions == null) {
      this.activeFilterOptions = new ArrayList<>();
    }
    this.activeFilterOptions.add(activeFilterOptionsItem);
    return this;
  }

  /**
   * Get activeFilterOptions
   * @return activeFilterOptions
   */
  @javax.annotation.Nullable
  public List<SearchResponseActiveFilterOptionsInner> getActiveFilterOptions() {
    return activeFilterOptions;
  }

  public void setActiveFilterOptions(List<SearchResponseActiveFilterOptionsInner> activeFilterOptions) {
    this.activeFilterOptions = activeFilterOptions;
  }


  public SearchResponse query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public SearchResponse totalResults(Integer totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * Get totalResults
   * @return totalResults
   */
  @javax.annotation.Nullable
  public Integer getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(Integer totalResults) {
    this.totalResults = totalResults;
  }


  public SearchResponse limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public SearchResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public SearchResponse results(List<SearchResponseResultsInner> results) {
    this.results = results;
    return this;
  }

  public SearchResponse addResultsItem(SearchResponseResultsInner resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public List<SearchResponseResultsInner> getResults() {
    return results;
  }

  public void setResults(List<SearchResponseResultsInner> results) {
    this.results = results;
  }


  public SearchResponse filterOptions(List<SearchResponseFilterOptionsInner> filterOptions) {
    this.filterOptions = filterOptions;
    return this;
  }

  public SearchResponse addFilterOptionsItem(SearchResponseFilterOptionsInner filterOptionsItem) {
    if (this.filterOptions == null) {
      this.filterOptions = new ArrayList<>();
    }
    this.filterOptions.add(filterOptionsItem);
    return this;
  }

  /**
   * Get filterOptions
   * @return filterOptions
   */
  @javax.annotation.Nullable
  public List<SearchResponseFilterOptionsInner> getFilterOptions() {
    return filterOptions;
  }

  public void setFilterOptions(List<SearchResponseFilterOptionsInner> filterOptions) {
    this.filterOptions = filterOptions;
  }


  public SearchResponse sortingOptions(List<SearchResponseSortingOptionsInner> sortingOptions) {
    this.sortingOptions = sortingOptions;
    return this;
  }

  public SearchResponse addSortingOptionsItem(SearchResponseSortingOptionsInner sortingOptionsItem) {
    if (this.sortingOptions == null) {
      this.sortingOptions = new ArrayList<>();
    }
    this.sortingOptions.add(sortingOptionsItem);
    return this;
  }

  /**
   * Get sortingOptions
   * @return sortingOptions
   */
  @javax.annotation.Nullable
  public List<SearchResponseSortingOptionsInner> getSortingOptions() {
    return sortingOptions;
  }

  public void setSortingOptions(List<SearchResponseSortingOptionsInner> sortingOptions) {
    this.sortingOptions = sortingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResponse searchResponse = (SearchResponse) o;
    return Objects.equals(this.sorting, searchResponse.sorting) &&
        Objects.equals(this.activeFilterOptions, searchResponse.activeFilterOptions) &&
        Objects.equals(this.query, searchResponse.query) &&
        Objects.equals(this.totalResults, searchResponse.totalResults) &&
        Objects.equals(this.limit, searchResponse.limit) &&
        Objects.equals(this.offset, searchResponse.offset) &&
        Objects.equals(this.results, searchResponse.results) &&
        Objects.equals(this.filterOptions, searchResponse.filterOptions) &&
        Objects.equals(this.sortingOptions, searchResponse.sortingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sorting, activeFilterOptions, query, totalResults, limit, offset, results, filterOptions, sortingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResponse {\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    activeFilterOptions: ").append(toIndentedString(activeFilterOptions)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    filterOptions: ").append(toIndentedString(filterOptions)).append("\n");
    sb.append("    sortingOptions: ").append(toIndentedString(sortingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sorting");
    openapiFields.add("active_filter_options");
    openapiFields.add("query");
    openapiFields.add("total_results");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("results");
    openapiFields.add("filter_options");
    openapiFields.add("sorting_options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResponse is not found in the empty JSON string", SearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sorting`
      if (jsonObj.get("sorting") != null && !jsonObj.get("sorting").isJsonNull()) {
        SearchResponseSorting.validateJsonElement(jsonObj.get("sorting"));
      }
      if (jsonObj.get("active_filter_options") != null && !jsonObj.get("active_filter_options").isJsonNull()) {
        JsonArray jsonArrayactiveFilterOptions = jsonObj.getAsJsonArray("active_filter_options");
        if (jsonArrayactiveFilterOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("active_filter_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `active_filter_options` to be an array in the JSON string but got `%s`", jsonObj.get("active_filter_options").toString()));
          }

          // validate the optional field `active_filter_options` (array)
          for (int i = 0; i < jsonArrayactiveFilterOptions.size(); i++) {
            SearchResponseActiveFilterOptionsInner.validateJsonElement(jsonArrayactiveFilterOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            SearchResponseResultsInner.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
      if (jsonObj.get("filter_options") != null && !jsonObj.get("filter_options").isJsonNull()) {
        JsonArray jsonArrayfilterOptions = jsonObj.getAsJsonArray("filter_options");
        if (jsonArrayfilterOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filter_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filter_options` to be an array in the JSON string but got `%s`", jsonObj.get("filter_options").toString()));
          }

          // validate the optional field `filter_options` (array)
          for (int i = 0; i < jsonArrayfilterOptions.size(); i++) {
            SearchResponseFilterOptionsInner.validateJsonElement(jsonArrayfilterOptions.get(i));
          };
        }
      }
      if (jsonObj.get("sorting_options") != null && !jsonObj.get("sorting_options").isJsonNull()) {
        JsonArray jsonArraysortingOptions = jsonObj.getAsJsonArray("sorting_options");
        if (jsonArraysortingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sorting_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sorting_options` to be an array in the JSON string but got `%s`", jsonObj.get("sorting_options").toString()));
          }

          // validate the optional field `sorting_options` (array)
          for (int i = 0; i < jsonArraysortingOptions.size(); i++) {
            SearchResponseSortingOptionsInner.validateJsonElement(jsonArraysortingOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResponse>() {
           @Override
           public void write(JsonWriter out, SearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResponse
   * @throws IOException if the JSON string is invalid with respect to SearchResponse
   */
  public static SearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResponse.class);
  }

  /**
   * Convert an instance of SearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

