<?php
/**
 * SearchResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sorting' => '\OpenAPI\Client\Model\SearchResponseSorting',
        'active_filter_options' => '\OpenAPI\Client\Model\SearchResponseActiveFilterOptionsInner[]',
        'query' => 'string',
        'total_results' => 'int',
        'limit' => 'int',
        'offset' => 'int',
        'results' => '\OpenAPI\Client\Model\SearchResponseResultsInner[]',
        'filter_options' => '\OpenAPI\Client\Model\SearchResponseFilterOptionsInner[]',
        'sorting_options' => '\OpenAPI\Client\Model\SearchResponseSortingOptionsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sorting' => null,
        'active_filter_options' => null,
        'query' => null,
        'total_results' => null,
        'limit' => null,
        'offset' => null,
        'results' => null,
        'filter_options' => null,
        'sorting_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sorting' => false,
        'active_filter_options' => false,
        'query' => false,
        'total_results' => false,
        'limit' => false,
        'offset' => false,
        'results' => false,
        'filter_options' => false,
        'sorting_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sorting' => 'sorting',
        'active_filter_options' => 'active_filter_options',
        'query' => 'query',
        'total_results' => 'total_results',
        'limit' => 'limit',
        'offset' => 'offset',
        'results' => 'results',
        'filter_options' => 'filter_options',
        'sorting_options' => 'sorting_options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sorting' => 'setSorting',
        'active_filter_options' => 'setActiveFilterOptions',
        'query' => 'setQuery',
        'total_results' => 'setTotalResults',
        'limit' => 'setLimit',
        'offset' => 'setOffset',
        'results' => 'setResults',
        'filter_options' => 'setFilterOptions',
        'sorting_options' => 'setSortingOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sorting' => 'getSorting',
        'active_filter_options' => 'getActiveFilterOptions',
        'query' => 'getQuery',
        'total_results' => 'getTotalResults',
        'limit' => 'getLimit',
        'offset' => 'getOffset',
        'results' => 'getResults',
        'filter_options' => 'getFilterOptions',
        'sorting_options' => 'getSortingOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sorting', $data ?? [], null);
        $this->setIfExists('active_filter_options', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('total_results', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('offset', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
        $this->setIfExists('filter_options', $data ?? [], null);
        $this->setIfExists('sorting_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['active_filter_options']) && (count($this->container['active_filter_options']) > 100)) {
            $invalidProperties[] = "invalid value for 'active_filter_options', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['results']) && (count($this->container['results']) > 100)) {
            $invalidProperties[] = "invalid value for 'results', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['filter_options']) && (count($this->container['filter_options']) > 100)) {
            $invalidProperties[] = "invalid value for 'filter_options', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['sorting_options']) && (count($this->container['sorting_options']) > 100)) {
            $invalidProperties[] = "invalid value for 'sorting_options', number of items must be less than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\SearchResponseSorting|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\SearchResponseSorting|null $sorting sorting
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        if (is_null($sorting)) {
            throw new \InvalidArgumentException('non-nullable sorting cannot be null');
        }
        $this->container['sorting'] = $sorting;

        return $this;
    }

    /**
     * Gets active_filter_options
     *
     * @return \OpenAPI\Client\Model\SearchResponseActiveFilterOptionsInner[]|null
     */
    public function getActiveFilterOptions()
    {
        return $this->container['active_filter_options'];
    }

    /**
     * Sets active_filter_options
     *
     * @param \OpenAPI\Client\Model\SearchResponseActiveFilterOptionsInner[]|null $active_filter_options active_filter_options
     *
     * @return self
     */
    public function setActiveFilterOptions($active_filter_options)
    {
        if (is_null($active_filter_options)) {
            throw new \InvalidArgumentException('non-nullable active_filter_options cannot be null');
        }

        if ((count($active_filter_options) > 100)) {
            throw new \InvalidArgumentException('invalid value for $active_filter_options when calling SearchResponse., number of items must be less than or equal to 100.');
        }
        $this->container['active_filter_options'] = $active_filter_options;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string|null $query query
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets total_results
     *
     * @return int|null
     */
    public function getTotalResults()
    {
        return $this->container['total_results'];
    }

    /**
     * Sets total_results
     *
     * @param int|null $total_results total_results
     *
     * @return self
     */
    public function setTotalResults($total_results)
    {
        if (is_null($total_results)) {
            throw new \InvalidArgumentException('non-nullable total_results cannot be null');
        }
        $this->container['total_results'] = $total_results;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit limit
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int|null
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int|null $offset offset
     *
     * @return self
     */
    public function setOffset($offset)
    {
        if (is_null($offset)) {
            throw new \InvalidArgumentException('non-nullable offset cannot be null');
        }
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \OpenAPI\Client\Model\SearchResponseResultsInner[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \OpenAPI\Client\Model\SearchResponseResultsInner[]|null $results results
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            throw new \InvalidArgumentException('non-nullable results cannot be null');
        }

        if ((count($results) > 100)) {
            throw new \InvalidArgumentException('invalid value for $results when calling SearchResponse., number of items must be less than or equal to 100.');
        }
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets filter_options
     *
     * @return \OpenAPI\Client\Model\SearchResponseFilterOptionsInner[]|null
     */
    public function getFilterOptions()
    {
        return $this->container['filter_options'];
    }

    /**
     * Sets filter_options
     *
     * @param \OpenAPI\Client\Model\SearchResponseFilterOptionsInner[]|null $filter_options filter_options
     *
     * @return self
     */
    public function setFilterOptions($filter_options)
    {
        if (is_null($filter_options)) {
            throw new \InvalidArgumentException('non-nullable filter_options cannot be null');
        }

        if ((count($filter_options) > 100)) {
            throw new \InvalidArgumentException('invalid value for $filter_options when calling SearchResponse., number of items must be less than or equal to 100.');
        }
        $this->container['filter_options'] = $filter_options;

        return $this;
    }

    /**
     * Gets sorting_options
     *
     * @return \OpenAPI\Client\Model\SearchResponseSortingOptionsInner[]|null
     */
    public function getSortingOptions()
    {
        return $this->container['sorting_options'];
    }

    /**
     * Sets sorting_options
     *
     * @param \OpenAPI\Client\Model\SearchResponseSortingOptionsInner[]|null $sorting_options sorting_options
     *
     * @return self
     */
    public function setSortingOptions($sorting_options)
    {
        if (is_null($sorting_options)) {
            throw new \InvalidArgumentException('non-nullable sorting_options cannot be null');
        }

        if ((count($sorting_options) > 100)) {
            throw new \InvalidArgumentException('invalid value for $sorting_options when calling SearchResponse., number of items must be less than or equal to 100.');
        }
        $this->container['sorting_options'] = $sorting_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


