/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchResponse.h
 *
 * 
 */

#ifndef OAISearchResponse_H
#define OAISearchResponse_H

#include <QJsonObject>

#include "OAISearchResponse_active_filter_options_inner.h"
#include "OAISearchResponse_filter_options_inner.h"
#include "OAISearchResponse_results_inner.h"
#include "OAISearchResponse_sorting.h"
#include "OAISearchResponse_sorting_options_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISearchResponse_sorting;
class OAISearchResponse_active_filter_options_inner;
class OAISearchResponse_results_inner;
class OAISearchResponse_filter_options_inner;
class OAISearchResponse_sorting_options_inner;

class OAISearchResponse : public OAIObject {
public:
    OAISearchResponse();
    OAISearchResponse(QString json);
    ~OAISearchResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISearchResponse_sorting getSorting() const;
    void setSorting(const OAISearchResponse_sorting &sorting);
    bool is_sorting_Set() const;
    bool is_sorting_Valid() const;

    QList<OAISearchResponse_active_filter_options_inner> getActiveFilterOptions() const;
    void setActiveFilterOptions(const QList<OAISearchResponse_active_filter_options_inner> &active_filter_options);
    bool is_active_filter_options_Set() const;
    bool is_active_filter_options_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    qint32 getTotalResults() const;
    void setTotalResults(const qint32 &total_results);
    bool is_total_results_Set() const;
    bool is_total_results_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<OAISearchResponse_results_inner> getResults() const;
    void setResults(const QList<OAISearchResponse_results_inner> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    QList<OAISearchResponse_filter_options_inner> getFilterOptions() const;
    void setFilterOptions(const QList<OAISearchResponse_filter_options_inner> &filter_options);
    bool is_filter_options_Set() const;
    bool is_filter_options_Valid() const;

    QList<OAISearchResponse_sorting_options_inner> getSortingOptions() const;
    void setSortingOptions(const QList<OAISearchResponse_sorting_options_inner> &sorting_options);
    bool is_sorting_options_Set() const;
    bool is_sorting_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISearchResponse_sorting m_sorting;
    bool m_sorting_isSet;
    bool m_sorting_isValid;

    QList<OAISearchResponse_active_filter_options_inner> m_active_filter_options;
    bool m_active_filter_options_isSet;
    bool m_active_filter_options_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    qint32 m_total_results;
    bool m_total_results_isSet;
    bool m_total_results_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<OAISearchResponse_results_inner> m_results;
    bool m_results_isSet;
    bool m_results_isValid;

    QList<OAISearchResponse_filter_options_inner> m_filter_options;
    bool m_filter_options_isSet;
    bool m_filter_options_isValid;

    QList<OAISearchResponse_sorting_options_inner> m_sorting_options;
    bool m_sorting_options_isSet;
    bool m_sorting_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchResponse)

#endif // OAISearchResponse_H
