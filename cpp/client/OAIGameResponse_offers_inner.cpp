/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameResponse_offers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameResponse_offers_inner::OAIGameResponse_offers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameResponse_offers_inner::OAIGameResponse_offers_inner() {
    this->initializeModel();
}

OAIGameResponse_offers_inner::~OAIGameResponse_offers_inner() {}

void OAIGameResponse_offers_inner::initializeModel() {

    m_price_isSet = false;
    m_price_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGameResponse_offers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameResponse_offers_inner::fromJsonObject(QJsonObject json) {

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("store_name")]);
    m_store_name_isSet = !json[QString("store_name")].isNull() && m_store_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGameResponse_offers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameResponse_offers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("store_name"), ::OpenAPI::toJsonValue(m_store_name));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIGameResponse_offers_inner_price OAIGameResponse_offers_inner::getPrice() const {
    return m_price;
}
void OAIGameResponse_offers_inner::setPrice(const OAIGameResponse_offers_inner_price &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGameResponse_offers_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGameResponse_offers_inner::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIGameResponse_offers_inner::getStoreName() const {
    return m_store_name;
}
void OAIGameResponse_offers_inner::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAIGameResponse_offers_inner::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAIGameResponse_offers_inner::is_store_name_Valid() const{
    return m_store_name_isValid;
}

QString OAIGameResponse_offers_inner::getPlatform() const {
    return m_platform;
}
void OAIGameResponse_offers_inner::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGameResponse_offers_inner::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGameResponse_offers_inner::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIGameResponse_offers_inner::getTitle() const {
    return m_title;
}
void OAIGameResponse_offers_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGameResponse_offers_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGameResponse_offers_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGameResponse_offers_inner::getUrl() const {
    return m_url;
}
void OAIGameResponse_offers_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGameResponse_offers_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGameResponse_offers_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGameResponse_offers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameResponse_offers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
