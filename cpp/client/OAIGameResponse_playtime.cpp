/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameResponse_playtime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameResponse_playtime::OAIGameResponse_playtime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameResponse_playtime::OAIGameResponse_playtime() {
    this->initializeModel();
}

OAIGameResponse_playtime::~OAIGameResponse_playtime() {}

void OAIGameResponse_playtime::initializeModel() {

    m_percentiles_isSet = false;
    m_percentiles_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;
}

void OAIGameResponse_playtime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameResponse_playtime::fromJsonObject(QJsonObject json) {

    m_percentiles_isValid = ::OpenAPI::fromJsonValue(m_percentiles, json[QString("percentiles")]);
    m_percentiles_isSet = !json[QString("percentiles")].isNull() && m_percentiles_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;
}

QString OAIGameResponse_playtime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameResponse_playtime::asJsonObject() const {
    QJsonObject obj;
    if (m_percentiles.size() > 0) {
        obj.insert(QString("percentiles"), ::OpenAPI::toJsonValue(m_percentiles));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_mentions_isSet) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    return obj;
}

QList<qint32> OAIGameResponse_playtime::getPercentiles() const {
    return m_percentiles;
}
void OAIGameResponse_playtime::setPercentiles(const QList<qint32> &percentiles) {
    m_percentiles = percentiles;
    m_percentiles_isSet = true;
}

bool OAIGameResponse_playtime::is_percentiles_Set() const{
    return m_percentiles_isSet;
}

bool OAIGameResponse_playtime::is_percentiles_Valid() const{
    return m_percentiles_isValid;
}

qint32 OAIGameResponse_playtime::getMin() const {
    return m_min;
}
void OAIGameResponse_playtime::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIGameResponse_playtime::is_min_Set() const{
    return m_min_isSet;
}

bool OAIGameResponse_playtime::is_min_Valid() const{
    return m_min_isValid;
}

qint32 OAIGameResponse_playtime::getMedian() const {
    return m_median;
}
void OAIGameResponse_playtime::setMedian(const qint32 &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAIGameResponse_playtime::is_median_Set() const{
    return m_median_isSet;
}

bool OAIGameResponse_playtime::is_median_Valid() const{
    return m_median_isValid;
}

qint32 OAIGameResponse_playtime::getMax() const {
    return m_max;
}
void OAIGameResponse_playtime::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIGameResponse_playtime::is_max_Set() const{
    return m_max_isSet;
}

bool OAIGameResponse_playtime::is_max_Valid() const{
    return m_max_isValid;
}

float OAIGameResponse_playtime::getMean() const {
    return m_mean;
}
void OAIGameResponse_playtime::setMean(const float &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIGameResponse_playtime::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIGameResponse_playtime::is_mean_Valid() const{
    return m_mean_isValid;
}

qint32 OAIGameResponse_playtime::getMentions() const {
    return m_mentions;
}
void OAIGameResponse_playtime::setMentions(const qint32 &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIGameResponse_playtime::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIGameResponse_playtime::is_mentions_Valid() const{
    return m_mentions_isValid;
}

bool OAIGameResponse_playtime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percentiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameResponse_playtime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
