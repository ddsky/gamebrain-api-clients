/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSuggestionResponse_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSuggestionResponse_results_inner::OAISearchSuggestionResponse_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSuggestionResponse_results_inner::OAISearchSuggestionResponse_results_inner() {
    this->initializeModel();
}

OAISearchSuggestionResponse_results_inner::~OAISearchSuggestionResponse_results_inner() {}

void OAISearchSuggestionResponse_results_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_adult_only_isSet = false;
    m_adult_only_isValid = false;
}

void OAISearchSuggestionResponse_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSuggestionResponse_results_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_adult_only_isValid = ::OpenAPI::fromJsonValue(m_adult_only, json[QString("adult_only")]);
    m_adult_only_isSet = !json[QString("adult_only")].isNull() && m_adult_only_isValid;
}

QString OAISearchSuggestionResponse_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSuggestionResponse_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_adult_only_isSet) {
        obj.insert(QString("adult_only"), ::OpenAPI::toJsonValue(m_adult_only));
    }
    return obj;
}

qint32 OAISearchSuggestionResponse_results_inner::getId() const {
    return m_id;
}
void OAISearchSuggestionResponse_results_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_id_Valid() const{
    return m_id_isValid;
}

double OAISearchSuggestionResponse_results_inner::getYear() const {
    return m_year;
}
void OAISearchSuggestionResponse_results_inner::setYear(const double &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_year_Set() const{
    return m_year_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_year_Valid() const{
    return m_year_isValid;
}

QString OAISearchSuggestionResponse_results_inner::getName() const {
    return m_name;
}
void OAISearchSuggestionResponse_results_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISearchSuggestionResponse_results_inner::getGenre() const {
    return m_genre;
}
void OAISearchSuggestionResponse_results_inner::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAISearchSuggestionResponse_results_inner::getImage() const {
    return m_image;
}
void OAISearchSuggestionResponse_results_inner::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISearchSuggestionResponse_results_inner::getLink() const {
    return m_link;
}
void OAISearchSuggestionResponse_results_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_link_Valid() const{
    return m_link_isValid;
}

OAISearchResponse_results_inner_rating OAISearchSuggestionResponse_results_inner::getRating() const {
    return m_rating;
}
void OAISearchSuggestionResponse_results_inner::setRating(const OAISearchResponse_results_inner_rating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_rating_Valid() const{
    return m_rating_isValid;
}

bool OAISearchSuggestionResponse_results_inner::isAdultOnly() const {
    return m_adult_only;
}
void OAISearchSuggestionResponse_results_inner::setAdultOnly(const bool &adult_only) {
    m_adult_only = adult_only;
    m_adult_only_isSet = true;
}

bool OAISearchSuggestionResponse_results_inner::is_adult_only_Set() const{
    return m_adult_only_isSet;
}

bool OAISearchSuggestionResponse_results_inner::is_adult_only_Valid() const{
    return m_adult_only_isValid;
}

bool OAISearchSuggestionResponse_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSuggestionResponse_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
