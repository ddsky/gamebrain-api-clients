/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse::OAISearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse::OAISearchResponse() {
    this->initializeModel();
}

OAISearchResponse::~OAISearchResponse() {}

void OAISearchResponse::initializeModel() {

    m_sorting_isSet = false;
    m_sorting_isValid = false;

    m_active_filter_options_isSet = false;
    m_active_filter_options_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_filter_options_isSet = false;
    m_filter_options_isValid = false;

    m_sorting_options_isSet = false;
    m_sorting_options_isValid = false;
}

void OAISearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse::fromJsonObject(QJsonObject json) {

    m_sorting_isValid = ::OpenAPI::fromJsonValue(m_sorting, json[QString("sorting")]);
    m_sorting_isSet = !json[QString("sorting")].isNull() && m_sorting_isValid;

    m_active_filter_options_isValid = ::OpenAPI::fromJsonValue(m_active_filter_options, json[QString("active_filter_options")]);
    m_active_filter_options_isSet = !json[QString("active_filter_options")].isNull() && m_active_filter_options_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("total_results")]);
    m_total_results_isSet = !json[QString("total_results")].isNull() && m_total_results_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_filter_options_isValid = ::OpenAPI::fromJsonValue(m_filter_options, json[QString("filter_options")]);
    m_filter_options_isSet = !json[QString("filter_options")].isNull() && m_filter_options_isValid;

    m_sorting_options_isValid = ::OpenAPI::fromJsonValue(m_sorting_options, json[QString("sorting_options")]);
    m_sorting_options_isSet = !json[QString("sorting_options")].isNull() && m_sorting_options_isValid;
}

QString OAISearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_sorting.isSet()) {
        obj.insert(QString("sorting"), ::OpenAPI::toJsonValue(m_sorting));
    }
    if (m_active_filter_options.size() > 0) {
        obj.insert(QString("active_filter_options"), ::OpenAPI::toJsonValue(m_active_filter_options));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("total_results"), ::OpenAPI::toJsonValue(m_total_results));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_filter_options.size() > 0) {
        obj.insert(QString("filter_options"), ::OpenAPI::toJsonValue(m_filter_options));
    }
    if (m_sorting_options.size() > 0) {
        obj.insert(QString("sorting_options"), ::OpenAPI::toJsonValue(m_sorting_options));
    }
    return obj;
}

OAISearchResponse_sorting OAISearchResponse::getSorting() const {
    return m_sorting;
}
void OAISearchResponse::setSorting(const OAISearchResponse_sorting &sorting) {
    m_sorting = sorting;
    m_sorting_isSet = true;
}

bool OAISearchResponse::is_sorting_Set() const{
    return m_sorting_isSet;
}

bool OAISearchResponse::is_sorting_Valid() const{
    return m_sorting_isValid;
}

QList<OAISearchResponse_active_filter_options_inner> OAISearchResponse::getActiveFilterOptions() const {
    return m_active_filter_options;
}
void OAISearchResponse::setActiveFilterOptions(const QList<OAISearchResponse_active_filter_options_inner> &active_filter_options) {
    m_active_filter_options = active_filter_options;
    m_active_filter_options_isSet = true;
}

bool OAISearchResponse::is_active_filter_options_Set() const{
    return m_active_filter_options_isSet;
}

bool OAISearchResponse::is_active_filter_options_Valid() const{
    return m_active_filter_options_isValid;
}

QString OAISearchResponse::getQuery() const {
    return m_query;
}
void OAISearchResponse::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchResponse::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchResponse::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAISearchResponse::getTotalResults() const {
    return m_total_results;
}
void OAISearchResponse::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAISearchResponse::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAISearchResponse::is_total_results_Valid() const{
    return m_total_results_isValid;
}

qint32 OAISearchResponse::getLimit() const {
    return m_limit;
}
void OAISearchResponse::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchResponse::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchResponse::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAISearchResponse::getOffset() const {
    return m_offset;
}
void OAISearchResponse::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISearchResponse::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISearchResponse::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAISearchResponse_results_inner> OAISearchResponse::getResults() const {
    return m_results;
}
void OAISearchResponse::setResults(const QList<OAISearchResponse_results_inner> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAISearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAISearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

QList<OAISearchResponse_filter_options_inner> OAISearchResponse::getFilterOptions() const {
    return m_filter_options;
}
void OAISearchResponse::setFilterOptions(const QList<OAISearchResponse_filter_options_inner> &filter_options) {
    m_filter_options = filter_options;
    m_filter_options_isSet = true;
}

bool OAISearchResponse::is_filter_options_Set() const{
    return m_filter_options_isSet;
}

bool OAISearchResponse::is_filter_options_Valid() const{
    return m_filter_options_isValid;
}

QList<OAISearchResponse_sorting_options_inner> OAISearchResponse::getSortingOptions() const {
    return m_sorting_options;
}
void OAISearchResponse::setSortingOptions(const QList<OAISearchResponse_sorting_options_inner> &sorting_options) {
    m_sorting_options = sorting_options;
    m_sorting_options_isSet = true;
}

bool OAISearchResponse::is_sorting_options_Set() const{
    return m_sorting_options_isSet;
}

bool OAISearchResponse::is_sorting_options_Valid() const{
    return m_sorting_options_isValid;
}

bool OAISearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sorting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_filter_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorting_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
