/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGameResponse.h
 *
 * 
 */

#ifndef OAIGameResponse_H
#define OAIGameResponse_H

#include <QJsonObject>

#include "OAIGameResponse_offers_inner.h"
#include "OAIGameResponse_official_stores_inner.h"
#include "OAIGameResponse_platforms_inner.h"
#include "OAIGameResponse_playtime.h"
#include "OAIGameResponse_rating.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGameResponse_rating;
class OAIGameResponse_playtime;
class OAIGameResponse_platforms_inner;
class OAIGameResponse_offers_inner;
class OAIGameResponse_official_stores_inner;

class OAIGameResponse : public OAIObject {
public:
    OAIGameResponse();
    OAIGameResponse(QString json);
    ~OAIGameResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getGameplay() const;
    void setGameplay(const QString &gameplay);
    bool is_gameplay_Set() const;
    bool is_gameplay_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getXUrl() const;
    void setXUrl(const QString &x_url);
    bool is_x_url_Set() const;
    bool is_x_url_Valid() const;

    OAIGameResponse_rating getRating() const;
    void setRating(const OAIGameResponse_rating &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getShortDescription() const;
    void setShortDescription(const QString &short_description);
    bool is_short_description_Set() const;
    bool is_short_description_Valid() const;

    QDate getReleaseDate() const;
    void setReleaseDate(const QDate &release_date);
    bool is_release_date_Set() const;
    bool is_release_date_Valid() const;

    QString getDeveloper() const;
    void setDeveloper(const QString &developer);
    bool is_developer_Set() const;
    bool is_developer_Valid() const;

    OAIGameResponse_playtime getPlaytime() const;
    void setPlaytime(const OAIGameResponse_playtime &playtime);
    bool is_playtime_Set() const;
    bool is_playtime_Valid() const;

    QList<OAIGameResponse_platforms_inner> getPlatforms() const;
    void setPlatforms(const QList<OAIGameResponse_platforms_inner> &platforms);
    bool is_platforms_Set() const;
    bool is_platforms_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList<OAIGameResponse_platforms_inner> getGenres() const;
    void setGenres(const QList<OAIGameResponse_platforms_inner> &genres);
    bool is_genres_Set() const;
    bool is_genres_Valid() const;

    QString getGenre() const;
    void setGenre(const QString &genre);
    bool is_genre_Set() const;
    bool is_genre_Valid() const;

    QList<OAIGameResponse_platforms_inner> getThemes() const;
    void setThemes(const QList<OAIGameResponse_platforms_inner> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    bool isAdultOnly() const;
    void setAdultOnly(const bool &adult_only);
    bool is_adult_only_Set() const;
    bool is_adult_only_Valid() const;

    QList<OAIGameResponse_platforms_inner> getPlayModes() const;
    void setPlayModes(const QList<OAIGameResponse_platforms_inner> &play_modes);
    bool is_play_modes_Set() const;
    bool is_play_modes_Valid() const;

    QList<QString> getScreenshots() const;
    void setScreenshots(const QList<QString> &screenshots);
    bool is_screenshots_Set() const;
    bool is_screenshots_Valid() const;

    QList<QString> getVideos() const;
    void setVideos(const QList<QString> &videos);
    bool is_videos_Set() const;
    bool is_videos_Valid() const;

    QList<OAIGameResponse_offers_inner> getOffers() const;
    void setOffers(const QList<OAIGameResponse_offers_inner> &offers);
    bool is_offers_Set() const;
    bool is_offers_Valid() const;

    QList<OAIGameResponse_official_stores_inner> getOfficialStores() const;
    void setOfficialStores(const QList<OAIGameResponse_official_stores_inner> &official_stores);
    bool is_official_stores_Set() const;
    bool is_official_stores_Valid() const;

    QString getMicroTrailer() const;
    void setMicroTrailer(const QString &micro_trailer);
    bool is_micro_trailer_Set() const;
    bool is_micro_trailer_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_gameplay;
    bool m_gameplay_isSet;
    bool m_gameplay_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_x_url;
    bool m_x_url_isSet;
    bool m_x_url_isValid;

    OAIGameResponse_rating m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_short_description;
    bool m_short_description_isSet;
    bool m_short_description_isValid;

    QDate m_release_date;
    bool m_release_date_isSet;
    bool m_release_date_isValid;

    QString m_developer;
    bool m_developer_isSet;
    bool m_developer_isValid;

    OAIGameResponse_playtime m_playtime;
    bool m_playtime_isSet;
    bool m_playtime_isValid;

    QList<OAIGameResponse_platforms_inner> m_platforms;
    bool m_platforms_isSet;
    bool m_platforms_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList<OAIGameResponse_platforms_inner> m_genres;
    bool m_genres_isSet;
    bool m_genres_isValid;

    QString m_genre;
    bool m_genre_isSet;
    bool m_genre_isValid;

    QList<OAIGameResponse_platforms_inner> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    bool m_adult_only;
    bool m_adult_only_isSet;
    bool m_adult_only_isValid;

    QList<OAIGameResponse_platforms_inner> m_play_modes;
    bool m_play_modes_isSet;
    bool m_play_modes_isValid;

    QList<QString> m_screenshots;
    bool m_screenshots_isSet;
    bool m_screenshots_isValid;

    QList<QString> m_videos;
    bool m_videos_isSet;
    bool m_videos_isValid;

    QList<OAIGameResponse_offers_inner> m_offers;
    bool m_offers_isSet;
    bool m_offers_isValid;

    QList<OAIGameResponse_official_stores_inner> m_official_stores;
    bool m_official_stores_isSet;
    bool m_official_stores_isValid;

    QString m_micro_trailer;
    bool m_micro_trailer_isSet;
    bool m_micro_trailer_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGameResponse)

#endif // OAIGameResponse_H
