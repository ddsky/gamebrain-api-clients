/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameResponse::OAIGameResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameResponse::OAIGameResponse() {
    this->initializeModel();
}

OAIGameResponse::~OAIGameResponse() {}

void OAIGameResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_gameplay_isSet = false;
    m_gameplay_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_x_url_isSet = false;
    m_x_url_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_developer_isSet = false;
    m_developer_isValid = false;

    m_playtime_isSet = false;
    m_playtime_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_adult_only_isSet = false;
    m_adult_only_isValid = false;

    m_play_modes_isSet = false;
    m_play_modes_isValid = false;

    m_screenshots_isSet = false;
    m_screenshots_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_official_stores_isSet = false;
    m_official_stores_isValid = false;

    m_micro_trailer_isSet = false;
    m_micro_trailer_isValid = false;
}

void OAIGameResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_gameplay_isValid = ::OpenAPI::fromJsonValue(m_gameplay, json[QString("gameplay")]);
    m_gameplay_isSet = !json[QString("gameplay")].isNull() && m_gameplay_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_x_url_isValid = ::OpenAPI::fromJsonValue(m_x_url, json[QString("x_url")]);
    m_x_url_isSet = !json[QString("x_url")].isNull() && m_x_url_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_developer_isValid = ::OpenAPI::fromJsonValue(m_developer, json[QString("developer")]);
    m_developer_isSet = !json[QString("developer")].isNull() && m_developer_isValid;

    m_playtime_isValid = ::OpenAPI::fromJsonValue(m_playtime, json[QString("playtime")]);
    m_playtime_isSet = !json[QString("playtime")].isNull() && m_playtime_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("genres")]);
    m_genres_isSet = !json[QString("genres")].isNull() && m_genres_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_adult_only_isValid = ::OpenAPI::fromJsonValue(m_adult_only, json[QString("adult_only")]);
    m_adult_only_isSet = !json[QString("adult_only")].isNull() && m_adult_only_isValid;

    m_play_modes_isValid = ::OpenAPI::fromJsonValue(m_play_modes, json[QString("play_modes")]);
    m_play_modes_isSet = !json[QString("play_modes")].isNull() && m_play_modes_isValid;

    m_screenshots_isValid = ::OpenAPI::fromJsonValue(m_screenshots, json[QString("screenshots")]);
    m_screenshots_isSet = !json[QString("screenshots")].isNull() && m_screenshots_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_official_stores_isValid = ::OpenAPI::fromJsonValue(m_official_stores, json[QString("official_stores")]);
    m_official_stores_isSet = !json[QString("official_stores")].isNull() && m_official_stores_isValid;

    m_micro_trailer_isValid = ::OpenAPI::fromJsonValue(m_micro_trailer, json[QString("micro_trailer")]);
    m_micro_trailer_isSet = !json[QString("micro_trailer")].isNull() && m_micro_trailer_isValid;
}

QString OAIGameResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_gameplay_isSet) {
        obj.insert(QString("gameplay"), ::OpenAPI::toJsonValue(m_gameplay));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_x_url_isSet) {
        obj.insert(QString("x_url"), ::OpenAPI::toJsonValue(m_x_url));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_developer_isSet) {
        obj.insert(QString("developer"), ::OpenAPI::toJsonValue(m_developer));
    }
    if (m_playtime.isSet()) {
        obj.insert(QString("playtime"), ::OpenAPI::toJsonValue(m_playtime));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_genres.size() > 0) {
        obj.insert(QString("genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_adult_only_isSet) {
        obj.insert(QString("adult_only"), ::OpenAPI::toJsonValue(m_adult_only));
    }
    if (m_play_modes.size() > 0) {
        obj.insert(QString("play_modes"), ::OpenAPI::toJsonValue(m_play_modes));
    }
    if (m_screenshots.size() > 0) {
        obj.insert(QString("screenshots"), ::OpenAPI::toJsonValue(m_screenshots));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_official_stores.size() > 0) {
        obj.insert(QString("official_stores"), ::OpenAPI::toJsonValue(m_official_stores));
    }
    if (m_micro_trailer_isSet) {
        obj.insert(QString("micro_trailer"), ::OpenAPI::toJsonValue(m_micro_trailer));
    }
    return obj;
}

qint32 OAIGameResponse::getId() const {
    return m_id;
}
void OAIGameResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGameResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGameResponse::getName() const {
    return m_name;
}
void OAIGameResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGameResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGameResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGameResponse::getImage() const {
    return m_image;
}
void OAIGameResponse::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGameResponse::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGameResponse::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIGameResponse::getGameplay() const {
    return m_gameplay;
}
void OAIGameResponse::setGameplay(const QString &gameplay) {
    m_gameplay = gameplay;
    m_gameplay_isSet = true;
}

bool OAIGameResponse::is_gameplay_Set() const{
    return m_gameplay_isSet;
}

bool OAIGameResponse::is_gameplay_Valid() const{
    return m_gameplay_isValid;
}

QString OAIGameResponse::getLink() const {
    return m_link;
}
void OAIGameResponse::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIGameResponse::is_link_Set() const{
    return m_link_isSet;
}

bool OAIGameResponse::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIGameResponse::getXUrl() const {
    return m_x_url;
}
void OAIGameResponse::setXUrl(const QString &x_url) {
    m_x_url = x_url;
    m_x_url_isSet = true;
}

bool OAIGameResponse::is_x_url_Set() const{
    return m_x_url_isSet;
}

bool OAIGameResponse::is_x_url_Valid() const{
    return m_x_url_isValid;
}

OAIGameResponse_rating OAIGameResponse::getRating() const {
    return m_rating;
}
void OAIGameResponse::setRating(const OAIGameResponse_rating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGameResponse::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGameResponse::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIGameResponse::getDescription() const {
    return m_description;
}
void OAIGameResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGameResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGameResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGameResponse::getShortDescription() const {
    return m_short_description;
}
void OAIGameResponse::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIGameResponse::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIGameResponse::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QDate OAIGameResponse::getReleaseDate() const {
    return m_release_date;
}
void OAIGameResponse::setReleaseDate(const QDate &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIGameResponse::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIGameResponse::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIGameResponse::getDeveloper() const {
    return m_developer;
}
void OAIGameResponse::setDeveloper(const QString &developer) {
    m_developer = developer;
    m_developer_isSet = true;
}

bool OAIGameResponse::is_developer_Set() const{
    return m_developer_isSet;
}

bool OAIGameResponse::is_developer_Valid() const{
    return m_developer_isValid;
}

OAIGameResponse_playtime OAIGameResponse::getPlaytime() const {
    return m_playtime;
}
void OAIGameResponse::setPlaytime(const OAIGameResponse_playtime &playtime) {
    m_playtime = playtime;
    m_playtime_isSet = true;
}

bool OAIGameResponse::is_playtime_Set() const{
    return m_playtime_isSet;
}

bool OAIGameResponse::is_playtime_Valid() const{
    return m_playtime_isValid;
}

QList<OAIGameResponse_platforms_inner> OAIGameResponse::getPlatforms() const {
    return m_platforms;
}
void OAIGameResponse::setPlatforms(const QList<OAIGameResponse_platforms_inner> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIGameResponse::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIGameResponse::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QList<QString> OAIGameResponse::getTags() const {
    return m_tags;
}
void OAIGameResponse::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGameResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGameResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIGameResponse_platforms_inner> OAIGameResponse::getGenres() const {
    return m_genres;
}
void OAIGameResponse::setGenres(const QList<OAIGameResponse_platforms_inner> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIGameResponse::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIGameResponse::is_genres_Valid() const{
    return m_genres_isValid;
}

QString OAIGameResponse::getGenre() const {
    return m_genre;
}
void OAIGameResponse::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIGameResponse::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIGameResponse::is_genre_Valid() const{
    return m_genre_isValid;
}

QList<OAIGameResponse_platforms_inner> OAIGameResponse::getThemes() const {
    return m_themes;
}
void OAIGameResponse::setThemes(const QList<OAIGameResponse_platforms_inner> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIGameResponse::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIGameResponse::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAIGameResponse::isAdultOnly() const {
    return m_adult_only;
}
void OAIGameResponse::setAdultOnly(const bool &adult_only) {
    m_adult_only = adult_only;
    m_adult_only_isSet = true;
}

bool OAIGameResponse::is_adult_only_Set() const{
    return m_adult_only_isSet;
}

bool OAIGameResponse::is_adult_only_Valid() const{
    return m_adult_only_isValid;
}

QList<OAIGameResponse_platforms_inner> OAIGameResponse::getPlayModes() const {
    return m_play_modes;
}
void OAIGameResponse::setPlayModes(const QList<OAIGameResponse_platforms_inner> &play_modes) {
    m_play_modes = play_modes;
    m_play_modes_isSet = true;
}

bool OAIGameResponse::is_play_modes_Set() const{
    return m_play_modes_isSet;
}

bool OAIGameResponse::is_play_modes_Valid() const{
    return m_play_modes_isValid;
}

QList<QString> OAIGameResponse::getScreenshots() const {
    return m_screenshots;
}
void OAIGameResponse::setScreenshots(const QList<QString> &screenshots) {
    m_screenshots = screenshots;
    m_screenshots_isSet = true;
}

bool OAIGameResponse::is_screenshots_Set() const{
    return m_screenshots_isSet;
}

bool OAIGameResponse::is_screenshots_Valid() const{
    return m_screenshots_isValid;
}

QList<QString> OAIGameResponse::getVideos() const {
    return m_videos;
}
void OAIGameResponse::setVideos(const QList<QString> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIGameResponse::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIGameResponse::is_videos_Valid() const{
    return m_videos_isValid;
}

QList<OAIGameResponse_offers_inner> OAIGameResponse::getOffers() const {
    return m_offers;
}
void OAIGameResponse::setOffers(const QList<OAIGameResponse_offers_inner> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIGameResponse::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIGameResponse::is_offers_Valid() const{
    return m_offers_isValid;
}

QList<OAIGameResponse_official_stores_inner> OAIGameResponse::getOfficialStores() const {
    return m_official_stores;
}
void OAIGameResponse::setOfficialStores(const QList<OAIGameResponse_official_stores_inner> &official_stores) {
    m_official_stores = official_stores;
    m_official_stores_isSet = true;
}

bool OAIGameResponse::is_official_stores_Set() const{
    return m_official_stores_isSet;
}

bool OAIGameResponse::is_official_stores_Valid() const{
    return m_official_stores_isValid;
}

QString OAIGameResponse::getMicroTrailer() const {
    return m_micro_trailer;
}
void OAIGameResponse::setMicroTrailer(const QString &micro_trailer) {
    m_micro_trailer = micro_trailer;
    m_micro_trailer_isSet = true;
}

bool OAIGameResponse::is_micro_trailer_Set() const{
    return m_micro_trailer_isSet;
}

bool OAIGameResponse::is_micro_trailer_Valid() const{
    return m_micro_trailer_isValid;
}

bool OAIGameResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gameplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_micro_trailer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
