/*
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = gamebrain.Client.OpenAPIDateConverter;

namespace gamebrain.Model
{
    /// <summary>
    /// SearchResponse
    /// </summary>
    [DataContract(Name = "SearchResponse")]
    public partial class SearchResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponse" /> class.
        /// </summary>
        /// <param name="sorting">sorting.</param>
        /// <param name="activeFilterOptions">activeFilterOptions.</param>
        /// <param name="query">query.</param>
        /// <param name="totalResults">totalResults.</param>
        /// <param name="limit">limit.</param>
        /// <param name="offset">offset.</param>
        /// <param name="results">results.</param>
        /// <param name="filterOptions">filterOptions.</param>
        /// <param name="sortingOptions">sortingOptions.</param>
        public SearchResponse(SearchResponseSorting sorting = default(SearchResponseSorting), List<SearchResponseActiveFilterOptionsInner> activeFilterOptions = default(List<SearchResponseActiveFilterOptionsInner>), string query = default(string), int totalResults = default(int), int limit = default(int), int offset = default(int), List<SearchResponseResultsInner> results = default(List<SearchResponseResultsInner>), List<SearchResponseFilterOptionsInner> filterOptions = default(List<SearchResponseFilterOptionsInner>), List<SearchResponseSortingOptionsInner> sortingOptions = default(List<SearchResponseSortingOptionsInner>))
        {
            this.Sorting = sorting;
            this.ActiveFilterOptions = activeFilterOptions;
            this.Query = query;
            this.TotalResults = totalResults;
            this.Limit = limit;
            this.Offset = offset;
            this.Results = results;
            this.FilterOptions = filterOptions;
            this.SortingOptions = sortingOptions;
        }

        /// <summary>
        /// Gets or Sets Sorting
        /// </summary>
        [DataMember(Name = "sorting", EmitDefaultValue = false)]
        public SearchResponseSorting Sorting { get; set; }

        /// <summary>
        /// Gets or Sets ActiveFilterOptions
        /// </summary>
        [DataMember(Name = "active_filter_options", EmitDefaultValue = false)]
        public List<SearchResponseActiveFilterOptionsInner> ActiveFilterOptions { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets TotalResults
        /// </summary>
        [DataMember(Name = "total_results", EmitDefaultValue = false)]
        public int TotalResults { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<SearchResponseResultsInner> Results { get; set; }

        /// <summary>
        /// Gets or Sets FilterOptions
        /// </summary>
        [DataMember(Name = "filter_options", EmitDefaultValue = false)]
        public List<SearchResponseFilterOptionsInner> FilterOptions { get; set; }

        /// <summary>
        /// Gets or Sets SortingOptions
        /// </summary>
        [DataMember(Name = "sorting_options", EmitDefaultValue = false)]
        public List<SearchResponseSortingOptionsInner> SortingOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResponse {\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("  ActiveFilterOptions: ").Append(ActiveFilterOptions).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  TotalResults: ").Append(TotalResults).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  FilterOptions: ").Append(FilterOptions).Append("\n");
            sb.Append("  SortingOptions: ").Append(SortingOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
