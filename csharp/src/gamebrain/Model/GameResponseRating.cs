/*
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = gamebrain.Client.OpenAPIDateConverter;

namespace gamebrain.Model
{
    /// <summary>
    /// GameResponseRating
    /// </summary>
    [DataContract(Name = "GameResponse_rating")]
    public partial class GameResponseRating : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameResponseRating" /> class.
        /// </summary>
        /// <param name="mean">mean.</param>
        /// <param name="count">count.</param>
        /// <param name="meanPlayers">meanPlayers.</param>
        /// <param name="countPlayers">countPlayers.</param>
        /// <param name="meanCritics">meanCritics.</param>
        /// <param name="countCritics">countCritics.</param>
        public GameResponseRating(float? mean = default(float?), int count = default(int), float? meanPlayers = default(float?), int countPlayers = default(int), float? meanCritics = default(float?), int countCritics = default(int))
        {
            this.Mean = mean;
            this.Count = count;
            this.MeanPlayers = meanPlayers;
            this.CountPlayers = countPlayers;
            this.MeanCritics = meanCritics;
            this.CountCritics = countCritics;
        }

        /// <summary>
        /// Gets or Sets Mean
        /// </summary>
        [DataMember(Name = "mean", EmitDefaultValue = true)]
        public float? Mean { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets MeanPlayers
        /// </summary>
        [DataMember(Name = "mean_players", EmitDefaultValue = true)]
        public float? MeanPlayers { get; set; }

        /// <summary>
        /// Gets or Sets CountPlayers
        /// </summary>
        [DataMember(Name = "count_players", EmitDefaultValue = false)]
        public int CountPlayers { get; set; }

        /// <summary>
        /// Gets or Sets MeanCritics
        /// </summary>
        [DataMember(Name = "mean_critics", EmitDefaultValue = true)]
        public float? MeanCritics { get; set; }

        /// <summary>
        /// Gets or Sets CountCritics
        /// </summary>
        [DataMember(Name = "count_critics", EmitDefaultValue = false)]
        public int CountCritics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameResponseRating {\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  MeanPlayers: ").Append(MeanPlayers).Append("\n");
            sb.Append("  CountPlayers: ").Append(CountPlayers).Append("\n");
            sb.Append("  MeanCritics: ").Append(MeanCritics).Append("\n");
            sb.Append("  CountCritics: ").Append(CountCritics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
