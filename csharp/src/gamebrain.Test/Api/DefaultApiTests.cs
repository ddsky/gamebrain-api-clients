/*
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using gamebrain.Client;
using gamebrain.Api;
// uncomment below to import models
//using gamebrain.Model;

namespace gamebrain.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test Detail
        /// </summary>
        [Fact]
        public void DetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string apiKey = null;
            //var response = instance.Detail(id, apiKey);
            //Assert.IsType<GameResponse>(response);
        }

        /// <summary>
        /// Test Search
        /// </summary>
        [Fact]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int offset = null;
            //int limit = null;
            //string filters = null;
            //string sort = null;
            //string sortOrder = null;
            //bool generateFilterOptions = null;
            //string apiKey = null;
            //var response = instance.Search(query, offset, limit, filters, sort, sortOrder, generateFilterOptions, apiKey);
            //Assert.IsType<SearchResponse>(response);
        }

        /// <summary>
        /// Test Similar
        /// </summary>
        [Fact]
        public void SimilarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int limit = null;
            //string apiKey = null;
            //var response = instance.Similar(id, limit, apiKey);
            //Assert.IsType<SimilarGamesResponse>(response);
        }

        /// <summary>
        /// Test Suggest
        /// </summary>
        [Fact]
        public void SuggestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int limit = null;
            //string apiKey = null;
            //var response = instance.Suggest(query, limit, apiKey);
            //Assert.IsType<SearchSuggestionResponse>(response);
        }
    }
}
