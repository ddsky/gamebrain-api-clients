/*
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameResponsePlaytime {
    #[serde(rename = "percentiles", skip_serializing_if = "Option::is_none")]
    pub percentiles: Option<Vec<i32>>,
    #[serde(rename = "min", skip_serializing_if = "Option::is_none")]
    pub min: Option<i32>,
    #[serde(rename = "median", skip_serializing_if = "Option::is_none")]
    pub median: Option<i32>,
    #[serde(rename = "max", skip_serializing_if = "Option::is_none")]
    pub max: Option<i32>,
    #[serde(rename = "mean", skip_serializing_if = "Option::is_none")]
    pub mean: Option<f32>,
    #[serde(rename = "mentions", skip_serializing_if = "Option::is_none")]
    pub mentions: Option<i32>,
}

impl GameResponsePlaytime {
    pub fn new() -> GameResponsePlaytime {
        GameResponsePlaytime {
            percentiles: None,
            min: None,
            median: None,
            max: None,
            mean: None,
            mentions: None,
        }
    }
}

