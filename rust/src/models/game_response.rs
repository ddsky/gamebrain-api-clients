/*
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameResponse {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "gameplay", skip_serializing_if = "Option::is_none")]
    pub gameplay: Option<String>,
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(rename = "x_url", skip_serializing_if = "Option::is_none")]
    pub x_url: Option<String>,
    #[serde(rename = "rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<Box<models::GameResponseRating>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "short_description", skip_serializing_if = "Option::is_none")]
    pub short_description: Option<String>,
    #[serde(rename = "release_date", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    #[serde(rename = "developer", skip_serializing_if = "Option::is_none")]
    pub developer: Option<String>,
    #[serde(rename = "playtime", skip_serializing_if = "Option::is_none")]
    pub playtime: Option<Box<models::GameResponsePlaytime>>,
    #[serde(rename = "platforms", skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<models::GameResponsePlatformsInner>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "genres", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Vec<models::GameResponsePlatformsInner>>,
    #[serde(rename = "genre", skip_serializing_if = "Option::is_none")]
    pub genre: Option<String>,
    #[serde(rename = "themes", skip_serializing_if = "Option::is_none")]
    pub themes: Option<Vec<models::GameResponsePlatformsInner>>,
    #[serde(rename = "adult_only", skip_serializing_if = "Option::is_none")]
    pub adult_only: Option<bool>,
    #[serde(rename = "play_modes", skip_serializing_if = "Option::is_none")]
    pub play_modes: Option<Vec<models::GameResponsePlatformsInner>>,
    #[serde(rename = "screenshots", skip_serializing_if = "Option::is_none")]
    pub screenshots: Option<Vec<String>>,
    #[serde(rename = "videos", skip_serializing_if = "Option::is_none")]
    pub videos: Option<Vec<String>>,
    #[serde(rename = "offers", skip_serializing_if = "Option::is_none")]
    pub offers: Option<Vec<models::GameResponseOffersInner>>,
    #[serde(rename = "official_stores", skip_serializing_if = "Option::is_none")]
    pub official_stores: Option<Vec<models::GameResponseOfficialStoresInner>>,
    #[serde(rename = "micro_trailer", skip_serializing_if = "Option::is_none")]
    pub micro_trailer: Option<String>,
}

impl GameResponse {
    pub fn new() -> GameResponse {
        GameResponse {
            id: None,
            name: None,
            image: None,
            gameplay: None,
            link: None,
            x_url: None,
            rating: None,
            description: None,
            short_description: None,
            release_date: None,
            developer: None,
            playtime: None,
            platforms: None,
            tags: None,
            genres: None,
            genre: None,
            themes: None,
            adult_only: None,
            play_modes: None,
            screenshots: None,
            videos: None,
            offers: None,
            official_stores: None,
            micro_trailer: None,
        }
    }
}

