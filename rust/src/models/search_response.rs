/*
 * GameBrain API
 *
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResponse {
    #[serde(rename = "sorting", skip_serializing_if = "Option::is_none")]
    pub sorting: Option<Box<models::SearchResponseSorting>>,
    #[serde(rename = "active_filter_options", skip_serializing_if = "Option::is_none")]
    pub active_filter_options: Option<Vec<models::SearchResponseActiveFilterOptionsInner>>,
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    #[serde(rename = "total_results", skip_serializing_if = "Option::is_none")]
    pub total_results: Option<i32>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "results", skip_serializing_if = "Option::is_none")]
    pub results: Option<Vec<models::SearchResponseResultsInner>>,
    #[serde(rename = "filter_options", skip_serializing_if = "Option::is_none")]
    pub filter_options: Option<Vec<models::SearchResponseFilterOptionsInner>>,
    #[serde(rename = "sorting_options", skip_serializing_if = "Option::is_none")]
    pub sorting_options: Option<Vec<models::SearchResponseSortingOptionsInner>>,
}

impl SearchResponse {
    pub fn new() -> SearchResponse {
        SearchResponse {
            sorting: None,
            active_filter_options: None,
            query: None,
            total_results: None,
            limit: None,
            offset: None,
            results: None,
            filter_options: None,
            sorting_options: None,
        }
    }
}

