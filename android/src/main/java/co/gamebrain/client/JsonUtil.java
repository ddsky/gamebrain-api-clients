/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package co.gamebrain.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import co.gamebrain.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("GameResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponse>>(){}.getType();
    }
    
    if ("GameResponseOffersInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponseOffersInner>>(){}.getType();
    }
    
    if ("GameResponseOffersInnerPrice".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponseOffersInnerPrice>>(){}.getType();
    }
    
    if ("GameResponseOfficialStoresInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponseOfficialStoresInner>>(){}.getType();
    }
    
    if ("GameResponsePlatformsInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponsePlatformsInner>>(){}.getType();
    }
    
    if ("GameResponsePlaytime".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponsePlaytime>>(){}.getType();
    }
    
    if ("GameResponseRating".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameResponseRating>>(){}.getType();
    }
    
    if ("SearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponse>>(){}.getType();
    }
    
    if ("SearchResponseActiveFilterOptionsInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseActiveFilterOptionsInner>>(){}.getType();
    }
    
    if ("SearchResponseActiveFilterOptionsInnerValuesInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseActiveFilterOptionsInnerValuesInner>>(){}.getType();
    }
    
    if ("SearchResponseFilterOptionsInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseFilterOptionsInner>>(){}.getType();
    }
    
    if ("SearchResponseFilterOptionsInnerValuesInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseFilterOptionsInnerValuesInner>>(){}.getType();
    }
    
    if ("SearchResponseResultsInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseResultsInner>>(){}.getType();
    }
    
    if ("SearchResponseResultsInnerRating".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseResultsInnerRating>>(){}.getType();
    }
    
    if ("SearchResponseSorting".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseSorting>>(){}.getType();
    }
    
    if ("SearchResponseSortingOptionsInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchResponseSortingOptionsInner>>(){}.getType();
    }
    
    if ("SearchSuggestionResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchSuggestionResponse>>(){}.getType();
    }
    
    if ("SearchSuggestionResponseResultsInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchSuggestionResponseResultsInner>>(){}.getType();
    }
    
    if ("SimilarGamesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimilarGamesResponse>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("GameResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponse>(){}.getType();
    }
    
    if ("GameResponseOffersInner".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponseOffersInner>(){}.getType();
    }
    
    if ("GameResponseOffersInnerPrice".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponseOffersInnerPrice>(){}.getType();
    }
    
    if ("GameResponseOfficialStoresInner".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponseOfficialStoresInner>(){}.getType();
    }
    
    if ("GameResponsePlatformsInner".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponsePlatformsInner>(){}.getType();
    }
    
    if ("GameResponsePlaytime".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponsePlaytime>(){}.getType();
    }
    
    if ("GameResponseRating".equalsIgnoreCase(className)) {
      return new TypeToken<GameResponseRating>(){}.getType();
    }
    
    if ("SearchResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponse>(){}.getType();
    }
    
    if ("SearchResponseActiveFilterOptionsInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseActiveFilterOptionsInner>(){}.getType();
    }
    
    if ("SearchResponseActiveFilterOptionsInnerValuesInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseActiveFilterOptionsInnerValuesInner>(){}.getType();
    }
    
    if ("SearchResponseFilterOptionsInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseFilterOptionsInner>(){}.getType();
    }
    
    if ("SearchResponseFilterOptionsInnerValuesInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseFilterOptionsInnerValuesInner>(){}.getType();
    }
    
    if ("SearchResponseResultsInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseResultsInner>(){}.getType();
    }
    
    if ("SearchResponseResultsInnerRating".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseResultsInnerRating>(){}.getType();
    }
    
    if ("SearchResponseSorting".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseSorting>(){}.getType();
    }
    
    if ("SearchResponseSortingOptionsInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchResponseSortingOptionsInner>(){}.getType();
    }
    
    if ("SearchSuggestionResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SearchSuggestionResponse>(){}.getType();
    }
    
    if ("SearchSuggestionResponseResultsInner".equalsIgnoreCase(className)) {
      return new TypeToken<SearchSuggestionResponseResultsInner>(){}.getType();
    }
    
    if ("SimilarGamesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SimilarGamesResponse>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
