/*
GameBrain API

GameBrain API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamebrain

import (
	"encoding/json"
)

// checks if the SearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResponse{}

// SearchResponse struct for SearchResponse
type SearchResponse struct {
	Sorting *SearchResponseSorting `json:"sorting,omitempty"`
	ActiveFilterOptions []SearchResponseActiveFilterOptionsInner `json:"active_filter_options,omitempty"`
	Query *string `json:"query,omitempty"`
	TotalResults *int32 `json:"total_results,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	Results []SearchResponseResultsInner `json:"results,omitempty"`
	FilterOptions []SearchResponseFilterOptionsInner `json:"filter_options,omitempty"`
	SortingOptions []SearchResponseSortingOptionsInner `json:"sorting_options,omitempty"`
}

// NewSearchResponse instantiates a new SearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResponse() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// NewSearchResponseWithDefaults instantiates a new SearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResponseWithDefaults() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// GetSorting returns the Sorting field value if set, zero value otherwise.
func (o *SearchResponse) GetSorting() SearchResponseSorting {
	if o == nil || IsNil(o.Sorting) {
		var ret SearchResponseSorting
		return ret
	}
	return *o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSortingOk() (*SearchResponseSorting, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *SearchResponse) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given SearchResponseSorting and assigns it to the Sorting field.
func (o *SearchResponse) SetSorting(v SearchResponseSorting) {
	o.Sorting = &v
}

// GetActiveFilterOptions returns the ActiveFilterOptions field value if set, zero value otherwise.
func (o *SearchResponse) GetActiveFilterOptions() []SearchResponseActiveFilterOptionsInner {
	if o == nil || IsNil(o.ActiveFilterOptions) {
		var ret []SearchResponseActiveFilterOptionsInner
		return ret
	}
	return o.ActiveFilterOptions
}

// GetActiveFilterOptionsOk returns a tuple with the ActiveFilterOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetActiveFilterOptionsOk() ([]SearchResponseActiveFilterOptionsInner, bool) {
	if o == nil || IsNil(o.ActiveFilterOptions) {
		return nil, false
	}
	return o.ActiveFilterOptions, true
}

// HasActiveFilterOptions returns a boolean if a field has been set.
func (o *SearchResponse) HasActiveFilterOptions() bool {
	if o != nil && !IsNil(o.ActiveFilterOptions) {
		return true
	}

	return false
}

// SetActiveFilterOptions gets a reference to the given []SearchResponseActiveFilterOptionsInner and assigns it to the ActiveFilterOptions field.
func (o *SearchResponse) SetActiveFilterOptions(v []SearchResponseActiveFilterOptionsInner) {
	o.ActiveFilterOptions = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchResponse) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchResponse) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SearchResponse) SetQuery(v string) {
	o.Query = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *SearchResponse) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *SearchResponse) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *SearchResponse) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchResponse) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchResponse) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchResponse) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchResponse) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchResponse) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchResponse) SetOffset(v int32) {
	o.Offset = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *SearchResponse) GetResults() []SearchResponseResultsInner {
	if o == nil || IsNil(o.Results) {
		var ret []SearchResponseResultsInner
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetResultsOk() ([]SearchResponseResultsInner, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *SearchResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []SearchResponseResultsInner and assigns it to the Results field.
func (o *SearchResponse) SetResults(v []SearchResponseResultsInner) {
	o.Results = v
}

// GetFilterOptions returns the FilterOptions field value if set, zero value otherwise.
func (o *SearchResponse) GetFilterOptions() []SearchResponseFilterOptionsInner {
	if o == nil || IsNil(o.FilterOptions) {
		var ret []SearchResponseFilterOptionsInner
		return ret
	}
	return o.FilterOptions
}

// GetFilterOptionsOk returns a tuple with the FilterOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetFilterOptionsOk() ([]SearchResponseFilterOptionsInner, bool) {
	if o == nil || IsNil(o.FilterOptions) {
		return nil, false
	}
	return o.FilterOptions, true
}

// HasFilterOptions returns a boolean if a field has been set.
func (o *SearchResponse) HasFilterOptions() bool {
	if o != nil && !IsNil(o.FilterOptions) {
		return true
	}

	return false
}

// SetFilterOptions gets a reference to the given []SearchResponseFilterOptionsInner and assigns it to the FilterOptions field.
func (o *SearchResponse) SetFilterOptions(v []SearchResponseFilterOptionsInner) {
	o.FilterOptions = v
}

// GetSortingOptions returns the SortingOptions field value if set, zero value otherwise.
func (o *SearchResponse) GetSortingOptions() []SearchResponseSortingOptionsInner {
	if o == nil || IsNil(o.SortingOptions) {
		var ret []SearchResponseSortingOptionsInner
		return ret
	}
	return o.SortingOptions
}

// GetSortingOptionsOk returns a tuple with the SortingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSortingOptionsOk() ([]SearchResponseSortingOptionsInner, bool) {
	if o == nil || IsNil(o.SortingOptions) {
		return nil, false
	}
	return o.SortingOptions, true
}

// HasSortingOptions returns a boolean if a field has been set.
func (o *SearchResponse) HasSortingOptions() bool {
	if o != nil && !IsNil(o.SortingOptions) {
		return true
	}

	return false
}

// SetSortingOptions gets a reference to the given []SearchResponseSortingOptionsInner and assigns it to the SortingOptions field.
func (o *SearchResponse) SetSortingOptions(v []SearchResponseSortingOptionsInner) {
	o.SortingOptions = v
}

func (o SearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sorting) {
		toSerialize["sorting"] = o.Sorting
	}
	if !IsNil(o.ActiveFilterOptions) {
		toSerialize["active_filter_options"] = o.ActiveFilterOptions
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.TotalResults) {
		toSerialize["total_results"] = o.TotalResults
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.FilterOptions) {
		toSerialize["filter_options"] = o.FilterOptions
	}
	if !IsNil(o.SortingOptions) {
		toSerialize["sorting_options"] = o.SortingOptions
	}
	return toSerialize, nil
}

type NullableSearchResponse struct {
	value *SearchResponse
	isSet bool
}

func (v NullableSearchResponse) Get() *SearchResponse {
	return v.value
}

func (v *NullableSearchResponse) Set(val *SearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponse(val *SearchResponse) *NullableSearchResponse {
	return &NullableSearchResponse{value: val, isSet: true}
}

func (v NullableSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


