/*
GameBrain API

GameBrain API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gamebrain

import (
	"encoding/json"
)

// checks if the GameResponsePlaytime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameResponsePlaytime{}

// GameResponsePlaytime struct for GameResponsePlaytime
type GameResponsePlaytime struct {
	Percentiles []int32 `json:"percentiles,omitempty"`
	Min *int32 `json:"min,omitempty"`
	Median *int32 `json:"median,omitempty"`
	Max *int32 `json:"max,omitempty"`
	Mean *float32 `json:"mean,omitempty"`
	Mentions *int32 `json:"mentions,omitempty"`
}

// NewGameResponsePlaytime instantiates a new GameResponsePlaytime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameResponsePlaytime() *GameResponsePlaytime {
	this := GameResponsePlaytime{}
	return &this
}

// NewGameResponsePlaytimeWithDefaults instantiates a new GameResponsePlaytime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameResponsePlaytimeWithDefaults() *GameResponsePlaytime {
	this := GameResponsePlaytime{}
	return &this
}

// GetPercentiles returns the Percentiles field value if set, zero value otherwise.
func (o *GameResponsePlaytime) GetPercentiles() []int32 {
	if o == nil || IsNil(o.Percentiles) {
		var ret []int32
		return ret
	}
	return o.Percentiles
}

// GetPercentilesOk returns a tuple with the Percentiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameResponsePlaytime) GetPercentilesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Percentiles) {
		return nil, false
	}
	return o.Percentiles, true
}

// HasPercentiles returns a boolean if a field has been set.
func (o *GameResponsePlaytime) HasPercentiles() bool {
	if o != nil && !IsNil(o.Percentiles) {
		return true
	}

	return false
}

// SetPercentiles gets a reference to the given []int32 and assigns it to the Percentiles field.
func (o *GameResponsePlaytime) SetPercentiles(v []int32) {
	o.Percentiles = v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *GameResponsePlaytime) GetMin() int32 {
	if o == nil || IsNil(o.Min) {
		var ret int32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameResponsePlaytime) GetMinOk() (*int32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *GameResponsePlaytime) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given int32 and assigns it to the Min field.
func (o *GameResponsePlaytime) SetMin(v int32) {
	o.Min = &v
}

// GetMedian returns the Median field value if set, zero value otherwise.
func (o *GameResponsePlaytime) GetMedian() int32 {
	if o == nil || IsNil(o.Median) {
		var ret int32
		return ret
	}
	return *o.Median
}

// GetMedianOk returns a tuple with the Median field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameResponsePlaytime) GetMedianOk() (*int32, bool) {
	if o == nil || IsNil(o.Median) {
		return nil, false
	}
	return o.Median, true
}

// HasMedian returns a boolean if a field has been set.
func (o *GameResponsePlaytime) HasMedian() bool {
	if o != nil && !IsNil(o.Median) {
		return true
	}

	return false
}

// SetMedian gets a reference to the given int32 and assigns it to the Median field.
func (o *GameResponsePlaytime) SetMedian(v int32) {
	o.Median = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *GameResponsePlaytime) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameResponsePlaytime) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *GameResponsePlaytime) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *GameResponsePlaytime) SetMax(v int32) {
	o.Max = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *GameResponsePlaytime) GetMean() float32 {
	if o == nil || IsNil(o.Mean) {
		var ret float32
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameResponsePlaytime) GetMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *GameResponsePlaytime) HasMean() bool {
	if o != nil && !IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float32 and assigns it to the Mean field.
func (o *GameResponsePlaytime) SetMean(v float32) {
	o.Mean = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *GameResponsePlaytime) GetMentions() int32 {
	if o == nil || IsNil(o.Mentions) {
		var ret int32
		return ret
	}
	return *o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameResponsePlaytime) GetMentionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *GameResponsePlaytime) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given int32 and assigns it to the Mentions field.
func (o *GameResponsePlaytime) SetMentions(v int32) {
	o.Mentions = &v
}

func (o GameResponsePlaytime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameResponsePlaytime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Percentiles) {
		toSerialize["percentiles"] = o.Percentiles
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Median) {
		toSerialize["median"] = o.Median
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	return toSerialize, nil
}

type NullableGameResponsePlaytime struct {
	value *GameResponsePlaytime
	isSet bool
}

func (v NullableGameResponsePlaytime) Get() *GameResponsePlaytime {
	return v.value
}

func (v *NullableGameResponsePlaytime) Set(val *GameResponsePlaytime) {
	v.value = val
	v.isSet = true
}

func (v NullableGameResponsePlaytime) IsSet() bool {
	return v.isSet
}

func (v *NullableGameResponsePlaytime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameResponsePlaytime(val *GameResponsePlaytime) *NullableGameResponsePlaytime {
	return &NullableGameResponsePlaytime{value: val, isSet: true}
}

func (v NullableGameResponsePlaytime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameResponsePlaytime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


