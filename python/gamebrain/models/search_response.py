# coding: utf-8

"""
    GameBrain API

    GameBrain API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gamebrain.models.search_response_active_filter_options_inner import SearchResponseActiveFilterOptionsInner
from gamebrain.models.search_response_filter_options_inner import SearchResponseFilterOptionsInner
from gamebrain.models.search_response_results_inner import SearchResponseResultsInner
from gamebrain.models.search_response_sorting import SearchResponseSorting
from gamebrain.models.search_response_sorting_options_inner import SearchResponseSortingOptionsInner
from typing import Optional, Set
from typing_extensions import Self

class SearchResponse(BaseModel):
    """
    SearchResponse
    """ # noqa: E501
    sorting: Optional[SearchResponseSorting] = None
    active_filter_options: Optional[List[SearchResponseActiveFilterOptionsInner]] = None
    query: Optional[StrictStr] = None
    total_results: Optional[StrictInt] = None
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    results: Optional[List[SearchResponseResultsInner]] = None
    filter_options: Optional[List[SearchResponseFilterOptionsInner]] = None
    sorting_options: Optional[List[SearchResponseSortingOptionsInner]] = None
    __properties: ClassVar[List[str]] = ["sorting", "active_filter_options", "query", "total_results", "limit", "offset", "results", "filter_options", "sorting_options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sorting
        if self.sorting:
            _dict['sorting'] = self.sorting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in active_filter_options (list)
        _items = []
        if self.active_filter_options:
            for _item in self.active_filter_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['active_filter_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_options (list)
        _items = []
        if self.filter_options:
            for _item in self.filter_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filter_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sorting_options (list)
        _items = []
        if self.sorting_options:
            for _item in self.sorting_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sorting_options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sorting": SearchResponseSorting.from_dict(obj["sorting"]) if obj.get("sorting") is not None else None,
            "active_filter_options": [SearchResponseActiveFilterOptionsInner.from_dict(_item) for _item in obj["active_filter_options"]] if obj.get("active_filter_options") is not None else None,
            "query": obj.get("query"),
            "total_results": obj.get("total_results"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "results": [SearchResponseResultsInner.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "filter_options": [SearchResponseFilterOptionsInner.from_dict(_item) for _item in obj["filter_options"]] if obj.get("filter_options") is not None else None,
            "sorting_options": [SearchResponseSortingOptionsInner.from_dict(_item) for _item in obj["sorting_options"]] if obj.get("sorting_options") is not None else None
        })
        return _obj


