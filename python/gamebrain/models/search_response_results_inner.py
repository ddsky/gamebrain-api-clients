# coding: utf-8

"""
    GameBrain API

    GameBrain API

    The version of the OpenAPI document: 1.0.1
    Contact: mail@gamebrain.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from gamebrain.models.search_response_results_inner_rating import SearchResponseResultsInnerRating
from typing import Optional, Set
from typing_extensions import Self

class SearchResponseResultsInner(BaseModel):
    """
    SearchResponseResultsInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    year: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    genre: Optional[StrictStr] = None
    image: Optional[StrictStr] = None
    link: Optional[StrictStr] = None
    rating: Optional[SearchResponseResultsInnerRating] = None
    adult_only: Optional[StrictBool] = None
    screenshots: Optional[Annotated[List[StrictStr], Field(max_length=100)]] = None
    micro_trailer: Optional[StrictStr] = None
    gameplay: Optional[StrictStr] = None
    short_description: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "year", "name", "genre", "image", "link", "rating", "adult_only", "screenshots", "micro_trailer", "gameplay", "short_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResponseResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResponseResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "year": obj.get("year"),
            "name": obj.get("name"),
            "genre": obj.get("genre"),
            "image": obj.get("image"),
            "link": obj.get("link"),
            "rating": SearchResponseResultsInnerRating.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "adult_only": obj.get("adult_only"),
            "screenshots": obj.get("screenshots"),
            "micro_trailer": obj.get("micro_trailer"),
            "gameplay": obj.get("gameplay"),
            "short_description": obj.get("short_description")
        })
        return _obj


