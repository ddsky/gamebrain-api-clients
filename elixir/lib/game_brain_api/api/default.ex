# NOTE: This file is auto generated by OpenAPI Generator 7.8.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule GameBrainAPI.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias GameBrainAPI.Connection
  import GameBrainAPI.RequestBuilder

  @doc """
  GET v1/games/{id}

  ### Parameters

  - `connection` (GameBrainAPI.Connection): Connection to server
  - `id` (integer()): 
  - `api_key` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, GameBrainAPI.Model.GameResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec detail(Tesla.Env.client, integer(), String.t, keyword()) :: {:ok, GameBrainAPI.Model.GameResponse.t} | {:error, Tesla.Env.t}
  def detail(connection, id, api_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/games/#{id}")
      |> add_param(:query, :"api-key", api_key)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GameBrainAPI.Model.GameResponse}
    ])
  end

  @doc """
  GET v1/games

  ### Parameters

  - `connection` (GameBrainAPI.Connection): Connection to server
  - `query` (String.t): 
  - `offset` (integer()): 
  - `limit` (integer()): 
  - `filters` (String.t): 
  - `sort` (String.t): 
  - `sort_order` (String.t): 
  - `generate_filter_options` (boolean()): 
  - `api_key` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, GameBrainAPI.Model.SearchResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search(Tesla.Env.client, String.t, integer(), integer(), String.t, String.t, String.t, boolean(), String.t, keyword()) :: {:ok, GameBrainAPI.Model.SearchResponse.t} | {:error, Tesla.Env.t}
  def search(connection, query, offset, limit, filters, sort, sort_order, generate_filter_options, api_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/games")
      |> add_param(:query, :query, query)
      |> add_param(:query, :offset, offset)
      |> add_param(:query, :limit, limit)
      |> add_param(:query, :filters, filters)
      |> add_param(:query, :sort, sort)
      |> add_param(:query, :"sort-order", sort_order)
      |> add_param(:query, :"generate-filter-options", generate_filter_options)
      |> add_param(:query, :"api-key", api_key)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GameBrainAPI.Model.SearchResponse}
    ])
  end

  @doc """
  GET v1/games/{id}/similar

  ### Parameters

  - `connection` (GameBrainAPI.Connection): Connection to server
  - `id` (integer()): 
  - `limit` (integer()): 
  - `api_key` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, GameBrainAPI.Model.SimilarGamesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec similar(Tesla.Env.client, integer(), integer(), String.t, keyword()) :: {:ok, GameBrainAPI.Model.SimilarGamesResponse.t} | {:error, Tesla.Env.t}
  def similar(connection, id, limit, api_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/games/#{id}/similar")
      |> add_param(:query, :limit, limit)
      |> add_param(:query, :"api-key", api_key)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GameBrainAPI.Model.SimilarGamesResponse}
    ])
  end

  @doc """
  GET v1/games/suggestions

  ### Parameters

  - `connection` (GameBrainAPI.Connection): Connection to server
  - `query` (String.t): 
  - `limit` (integer()): 
  - `api_key` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, GameBrainAPI.Model.SearchSuggestionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec suggest(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, GameBrainAPI.Model.SearchSuggestionResponse.t} | {:error, Tesla.Env.t}
  def suggest(connection, query, limit, api_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/games/suggestions")
      |> add_param(:query, :query, query)
      |> add_param(:query, :limit, limit)
      |> add_param(:query, :"api-key", api_key)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, GameBrainAPI.Model.SearchSuggestionResponse}
    ])
  end
end
