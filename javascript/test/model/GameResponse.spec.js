/**
 * GameBrain API
 * GameBrain API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: mail@gamebrain.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GamebrainJs);
  }
}(this, function(expect, GamebrainJs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GamebrainJs.GameResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GameResponse', function() {
    it('should create an instance of GameResponse', function() {
      // uncomment below and update the code to test GameResponse
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be.a(GamebrainJs.GameResponse);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property gameplay (base name: "gameplay")', function() {
      // uncomment below and update the code to test the property gameplay
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property xUrl (base name: "x_url")', function() {
      // uncomment below and update the code to test the property xUrl
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property shortDescription (base name: "short_description")', function() {
      // uncomment below and update the code to test the property shortDescription
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property releaseDate (base name: "release_date")', function() {
      // uncomment below and update the code to test the property releaseDate
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property developer (base name: "developer")', function() {
      // uncomment below and update the code to test the property developer
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property playtime (base name: "playtime")', function() {
      // uncomment below and update the code to test the property playtime
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property platforms (base name: "platforms")', function() {
      // uncomment below and update the code to test the property platforms
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property genres (base name: "genres")', function() {
      // uncomment below and update the code to test the property genres
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property genre (base name: "genre")', function() {
      // uncomment below and update the code to test the property genre
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property themes (base name: "themes")', function() {
      // uncomment below and update the code to test the property themes
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property adultOnly (base name: "adult_only")', function() {
      // uncomment below and update the code to test the property adultOnly
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property playModes (base name: "play_modes")', function() {
      // uncomment below and update the code to test the property playModes
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property screenshots (base name: "screenshots")', function() {
      // uncomment below and update the code to test the property screenshots
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property videos (base name: "videos")', function() {
      // uncomment below and update the code to test the property videos
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property offers (base name: "offers")', function() {
      // uncomment below and update the code to test the property offers
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property officialStores (base name: "official_stores")', function() {
      // uncomment below and update the code to test the property officialStores
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

    it('should have the property microTrailer (base name: "micro_trailer")', function() {
      // uncomment below and update the code to test the property microTrailer
      //var instance = new GamebrainJs.GameResponse();
      //expect(instance).to.be();
    });

  });

}));
