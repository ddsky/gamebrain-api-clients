/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package co.gamebrain

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import co.gamebrain.client.model.GameResponse
import co.gamebrain.client.model.SearchResponse
import co.gamebrain.client.model.SearchSuggestionResponse
import co.gamebrain.client.model.SimilarGamesResponse

import com.squareup.moshi.Json

import gamebrain.infrastructure.ApiClient
import gamebrain.infrastructure.ApiResponse
import gamebrain.infrastructure.ClientException
import gamebrain.infrastructure.ClientError
import gamebrain.infrastructure.ServerException
import gamebrain.infrastructure.ServerError
import gamebrain.infrastructure.MultiValueMap
import gamebrain.infrastructure.PartConfig
import gamebrain.infrastructure.RequestConfig
import gamebrain.infrastructure.RequestMethod
import gamebrain.infrastructure.ResponseType
import gamebrain.infrastructure.Success
import gamebrain.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.gamebrain.co/v1")
        }
    }

    /**
     * GET v1/games/{id}
     * 
     * @param id 
     * @param apiKey 
     * @return GameResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun detail(id: kotlin.Int, apiKey: kotlin.String) : GameResponse {
        val localVarResponse = detailWithHttpInfo(id = id, apiKey = apiKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GameResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET v1/games/{id}
     * 
     * @param id 
     * @param apiKey 
     * @return ApiResponse<GameResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun detailWithHttpInfo(id: kotlin.Int, apiKey: kotlin.String) : ApiResponse<GameResponse?> {
        val localVariableConfig = detailRequestConfig(id = id, apiKey = apiKey)

        return request<Unit, GameResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation detail
     *
     * @param id 
     * @param apiKey 
     * @return RequestConfig
     */
    fun detailRequestConfig(id: kotlin.Int, apiKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("api-key", listOf(apiKey.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/games/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET v1/games
     * 
     * @param query 
     * @param offset 
     * @param limit 
     * @param filters  (default to "[]")
     * @param sort 
     * @param sortOrder  (default to "asc")
     * @param generateFilterOptions  (default to true)
     * @param apiKey 
     * @return SearchResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun search(query: kotlin.String, offset: kotlin.Int, limit: kotlin.Int, filters: kotlin.String = "[]", sort: kotlin.String, sortOrder: kotlin.String = "asc", generateFilterOptions: kotlin.Boolean = true, apiKey: kotlin.String) : SearchResponse {
        val localVarResponse = searchWithHttpInfo(query = query, offset = offset, limit = limit, filters = filters, sort = sort, sortOrder = sortOrder, generateFilterOptions = generateFilterOptions, apiKey = apiKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET v1/games
     * 
     * @param query 
     * @param offset 
     * @param limit 
     * @param filters  (default to "[]")
     * @param sort 
     * @param sortOrder  (default to "asc")
     * @param generateFilterOptions  (default to true)
     * @param apiKey 
     * @return ApiResponse<SearchResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchWithHttpInfo(query: kotlin.String, offset: kotlin.Int, limit: kotlin.Int, filters: kotlin.String, sort: kotlin.String, sortOrder: kotlin.String, generateFilterOptions: kotlin.Boolean, apiKey: kotlin.String) : ApiResponse<SearchResponse?> {
        val localVariableConfig = searchRequestConfig(query = query, offset = offset, limit = limit, filters = filters, sort = sort, sortOrder = sortOrder, generateFilterOptions = generateFilterOptions, apiKey = apiKey)

        return request<Unit, SearchResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation search
     *
     * @param query 
     * @param offset 
     * @param limit 
     * @param filters  (default to "[]")
     * @param sort 
     * @param sortOrder  (default to "asc")
     * @param generateFilterOptions  (default to true)
     * @param apiKey 
     * @return RequestConfig
     */
    fun searchRequestConfig(query: kotlin.String, offset: kotlin.Int, limit: kotlin.Int, filters: kotlin.String, sort: kotlin.String, sortOrder: kotlin.String, generateFilterOptions: kotlin.Boolean, apiKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                put("offset", listOf(offset.toString()))
                put("limit", listOf(limit.toString()))
                put("filters", listOf(filters.toString()))
                put("sort", listOf(sort.toString()))
                put("sort-order", listOf(sortOrder.toString()))
                put("generate-filter-options", listOf(generateFilterOptions.toString()))
                put("api-key", listOf(apiKey.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/games",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET v1/games/{id}/similar
     * 
     * @param id 
     * @param limit 
     * @param apiKey 
     * @return SimilarGamesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun similar(id: kotlin.Int, limit: kotlin.Int, apiKey: kotlin.String) : SimilarGamesResponse {
        val localVarResponse = similarWithHttpInfo(id = id, limit = limit, apiKey = apiKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SimilarGamesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET v1/games/{id}/similar
     * 
     * @param id 
     * @param limit 
     * @param apiKey 
     * @return ApiResponse<SimilarGamesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun similarWithHttpInfo(id: kotlin.Int, limit: kotlin.Int, apiKey: kotlin.String) : ApiResponse<SimilarGamesResponse?> {
        val localVariableConfig = similarRequestConfig(id = id, limit = limit, apiKey = apiKey)

        return request<Unit, SimilarGamesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation similar
     *
     * @param id 
     * @param limit 
     * @param apiKey 
     * @return RequestConfig
     */
    fun similarRequestConfig(id: kotlin.Int, limit: kotlin.Int, apiKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("limit", listOf(limit.toString()))
                put("api-key", listOf(apiKey.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/games/{id}/similar".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET v1/games/suggestions
     * 
     * @param query 
     * @param limit 
     * @param apiKey 
     * @return SearchSuggestionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun suggest(query: kotlin.String, limit: kotlin.Int, apiKey: kotlin.String) : SearchSuggestionResponse {
        val localVarResponse = suggestWithHttpInfo(query = query, limit = limit, apiKey = apiKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchSuggestionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET v1/games/suggestions
     * 
     * @param query 
     * @param limit 
     * @param apiKey 
     * @return ApiResponse<SearchSuggestionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun suggestWithHttpInfo(query: kotlin.String, limit: kotlin.Int, apiKey: kotlin.String) : ApiResponse<SearchSuggestionResponse?> {
        val localVariableConfig = suggestRequestConfig(query = query, limit = limit, apiKey = apiKey)

        return request<Unit, SearchSuggestionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation suggest
     *
     * @param query 
     * @param limit 
     * @param apiKey 
     * @return RequestConfig
     */
    fun suggestRequestConfig(query: kotlin.String, limit: kotlin.Int, apiKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                put("limit", listOf(limit.toString()))
                put("api-key", listOf(apiKey.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/games/suggestions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
